#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>
# $HOME: /app

set -e

echo 'BUN-BUILDPACK - v1.0.0'

BUILD_DIR=${1:-.}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}

HEROKU_DIR=$BUILD_DIR/.heroku
BIN_DIR=$HEROKU_DIR/bin

# To enable the local source build cache path, copy the files and match the build path with the startup path.
cp -rT $BUILD_DIR $HOME
cd $HOME

if [ -f runtime.bun.txt ]
then
  INSTALL_VERSION_OPTION="-s bun-$(cat runtime.bun.txt)"
elif [ -f runtime.txt ]
then
  INSTALL_VERSION_OPTION="-s bun-$(cat runtime.txt)"
fi
echo $INSTALL_VERSION_OPTION

# install bun
export BUN_INSTALL=$BUILD_DIR/.heroku
export BUN_DIR=$BUILD_DIR/.heroku/cache
curl -fsSL https://bun.sh/install | bash $INSTALL_VERSION_OPTION
export PATH="$BUN_INSTALL/bin:$PATH"

# set environment variables
PROFILE_PATH="$BUILD_DIR/.profile.d/bun.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo 'export PATH="$HOME/.heroku/bin:$PATH"' >> $PROFILE_PATH
echo 'export BUN_DIR="$HOME/.heroku/cache"' >> $PROFILE_PATH

# Helper to read env vars from either real env or $ENV_DIR files
get_env_var() {
  local var_name="$1"
  if [ -n "${!var_name}" ]; then
    echo "${!var_name}"
  elif [ -n "$ENV_DIR" ] && [ -f "$ENV_DIR/$var_name" ]; then
    cat "$ENV_DIR/$var_name"
  fi
}

set +e

# download dependencies
if [ -f package.json ]
then
  echo "Installing dependencies..."
  cd $BUILD_DIR
  bun install --production

  echo "Building App"
  bun run -b build

  # Optionally install runtime deps in a dist folder (gated by env var)
  SHOULD_INSTALL=$(get_env_var INSTALL_GATEWAY_DIST_DEPS || true)
  SHOULD_INSTALL=$(printf "%s" "$SHOULD_INSTALL" | tr '[:upper:]' '[:lower:]')
  if [ "$SHOULD_INSTALL" = "true" ] || [ "$SHOULD_INSTALL" = "1" ]; then
    DIST_DIR=$(get_env_var GATEWAY_DIST_DIR)
    if [ -z "$DIST_DIR" ]; then
      DIST_DIR="apis/servers/api-gateway-server/dist"
    fi
    if [ -f "$BUILD_DIR/$DIST_DIR/package.json" ]; then
      echo "INSTALL_GATEWAY_DIST_DEPS enabled -> installing runtime deps in $DIST_DIR"
      cd "$BUILD_DIR/$DIST_DIR"
      bun install --production
      cd "$BUILD_DIR"
    else
      echo "No package.json at $DIST_DIR, skipping runtime install"
    fi
  fi

  echo "Cleaning up unnecessary files..."
  # Add your cleanup steps here
  rm -rf $BUILD_DIR/node_modules # If using a custom node_modules cache, make sure to restore it in the next deploy
  rm -rf $BUILD_DIR/tmp
  rm -rf $BUILD_DIR/.cache
  rm -rf $HEROKU_DIR/install/cache
  rm -rf $HEROKU_DIR/install
  # Add any other directories you don't need in your final slug
fi

# List all files and directories with their sizes
# echo "Listing all files and directories with their sizes..."
# du -ah $BUILD_DIR | sort -rh | head -n 100

# Check for .env file and customize commands if exists
if [ -f $ENV_DIR/.env ]
then
  echo "Found .env file, customizing commands..."
  # Load .env variables
  export $(cat $ENV_DIR/.env | xargs)
  # Use variables from .env to alter build commands if necessary
  if [ -n "$BUILD_COMMAND" ]; then
    echo "Running custom build command: $BUILD_COMMAND"
    $BUILD_COMMAND
  fi
else
  echo "No .env file found, using default commands."
fi

